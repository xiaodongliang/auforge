!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.StylableSantaUtils=t():e.StylableSantaUtils=t()}(this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=15)}([function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){function n(){}function r(e){this.states=this.compileStates(e)}r.prototype.compileStates=function(e){var t={};return Object.keys(e).forEach(function(n){t[n]=this.compileState(e[n],e)},this),t},r.prototype.compileState=function(e,t){var a=[];!function e(n){if(Array.isArray(n))n.forEach(e);else if("object"==typeof n)Object.keys(n).forEach(function(e){var t,o;t=e,o=n[e],a.push({groups:r.getGroupCount(t),regExp:t,value:o})});else{if("string"!=typeof n)throw new Error("Unexpected 'state' format");e(t[n])}}(e);var o=a.map(function(e){return"("+e.regExp+")"}).join("|"),s=[],i=1;return a.forEach(function(e){var t,r;"function"==typeof e.value?t=e.value:"string"==typeof e.value?(r=e.value,t=function(){return r}):t=n,s.push({name:e.regExp,fn:t,pos:i,pos2:i+e.groups+1}),i+=e.groups+1}),{regExp:new RegExp(o,"g"),actions:s}},r.getGroupCount=function(e){return new RegExp("("+e+")|^$").exec("").length-2},r.prototype.parse=function(e,t,n){n=n||{};for(var r=e,a=0;;){var o=this.states[r],s=o.regExp;s.lastIndex=a;var i=s.exec(t);if(!i)return n;var u=o.actions;a=o.regExp.lastIndex;for(var c=0;c<u.length;c++){var f=u[c];if(i[f.pos]){var l=f.fn.apply(n,Array.prototype.slice.call(i,f.pos,f.pos2).concat([o.regExp.lastIndex-i[0].length,i[0].length]));if(l){if(!(l in this.states))throw new Error("State '"+l+"' doesn't exist");r=l}break}}}},e.exports=r},function(e,t,n){var r=n(7).generate,a=n(8).parse,o=n(4),s=n(9),i=n(10);function u(e){return _?y?i.UNICODE_IGNORE_CASE[e]:i.UNICODE[e]:i.REGULAR[e]}var c={}.hasOwnProperty;var f=o().addRange(0,1114111),l=o().addRange(0,65535),d=f.clone().remove(10,13,8232,8233),p=d.clone().intersection(l);function h(e,t){for(var n in t)e[n]=t[n]}function g(e,t){if(t){var n=a(t,"");switch(n.type){case"characterClass":case"group":case"value":break;default:n=function(e,t){return{type:"group",behavior:"ignore",body:[e],raw:"(?:"+t+")"}}(n,t)}h(e,n)}}function v(e){return!!function(e,t){return c.call(e,t)}(s,e)&&s[e]}o.prototype.iuAddRange=function(e,t){do{var n=v(e);n&&this.add(n)}while(++e<=t);return this};var y=!1,_=!1;function m(e){switch(e.type){case"dot":g(e,(_?d:p).toString());break;case"characterClass":e=function(e){var t=o();return e.body.forEach(function(e){switch(e.type){case"value":if(t.add(e.codePoint),y&&_){var n=v(e.codePoint);n&&t.add(n)}break;case"characterClassRange":var r=e.min.codePoint,a=e.max.codePoint;t.addRange(r,a),y&&_&&t.iuAddRange(r,a);break;case"characterClassEscape":t.add(u(e.value));break;default:throw Error("Unknown term type: "+e.type)}}),e.negative&&(t=(_?f:l).clone().remove(t)),g(e,t.toString()),e}(e);break;case"characterClassEscape":g(e,u(e.value).toString());break;case"alternative":case"disjunction":case"group":case"quantifier":e.body=e.body.map(m);break;case"value":var t=e.codePoint,n=o(t);if(y&&_){var r=v(t);r&&n.add(r)}g(e,n.toString());break;case"anchor":case"empty":case"group":case"reference":break;default:throw Error("Unknown term type: "+e.type)}return e}e.exports=function(e,t){var n=a(e,t);return y=!!t&&t.indexOf("i")>-1,_=!!t&&t.indexOf("u")>-1,h(n,m(n)),r(n)}},function(e,t,n){(function(e,r){var a;/*! https://mths.be/regenerate v1.3.3 by @mathias | MIT license */!function(o){var s=t,i=(e&&e.exports,"object"==typeof r&&r);i.global!==i&&i.window;var u="A range’s `stop` value must be greater than or equal to the `start` value.",c="Invalid code point value. Code points range from U+000000 to U+10FFFF.",f=/\\x00([^0123456789]|$)/g,l={},d=l.hasOwnProperty,p=function(e,t){for(var n=-1,r=e.length;++n<r;)t(e[n],n)},h=l.toString,g=function(e){return"[object Array]"==h.call(e)},v=function(e){return"number"==typeof e||"[object Number]"==h.call(e)},y=function(e,t){var n=String(e);return n.length<t?("0000"+n).slice(-t):n},_=function(e){return Number(e).toString(16).toUpperCase()},m=[].slice,b=function(e,t){for(var n,r,a=0,o=e.length;a<o;){if(n=e[a],r=e[a+1],t>=n&&t<r)return t==n?r==n+1?(e.splice(a,2),e):(e[a]=t+1,e):t==r-1?(e[a+1]=t,e):(e.splice(a,2,n,t,t+1,r),e);a+=2}return e},x=function(e,t,n){if(n<t)throw Error(u);for(var r,a,o=0;o<e.length;){if(r=e[o],a=e[o+1]-1,r>n)return e;if(t<=r&&n>=a)e.splice(o,2);else{if(t>=r&&n<a)return t==r?(e[o]=n+1,e[o+1]=a+1,e):(e.splice(o,2,r,t,n+1,a+1),e);if(t>=r&&t<=a)e[o+1]=t;else if(n>=r&&n<=a)return e[o]=n+1,e;o+=2}}return e},R=function(e,t){var n,r,a=0,o=null,s=e.length;if(t<0||t>1114111)throw RangeError(c);for(;a<s;){if(n=e[a],r=e[a+1],t>=n&&t<r)return e;if(t==n-1)return e[a]=t,e;if(n>t)return e.splice(null!=o?o+2:0,0,t,t+1),e;if(t==r)return t+1==e[a+2]?(e.splice(a,4,n,e[a+3]),e):(e[a+1]=t+1,e);o=a,a+=2}return e.push(t,t+1),e},w=function(e,t){for(var n,r,a=0,o=e.slice(),s=t.length;a<s;)o=(n=t[a])==(r=t[a+1]-1)?R(o,n):C(o,n,r),a+=2;return o},E=function(e,t){for(var n,r,a=0,o=e.slice(),s=t.length;a<s;)o=(n=t[a])==(r=t[a+1]-1)?b(o,n):x(o,n,r),a+=2;return o},C=function(e,t,n){if(n<t)throw Error(u);if(t<0||t>1114111||n<0||n>1114111)throw RangeError(c);for(var r,a,o=0,s=!1,i=e.length;o<i;){if(r=e[o],a=e[o+1],s){if(r==n+1)return e.splice(o-1,2),e;if(r>n)return e;r>=t&&r<=n&&(a>t&&a-1<=n?(e.splice(o,2),o-=2):(e.splice(o-1,2),o-=2))}else{if(r==n+1)return e[o]=t,e;if(r>n)return e.splice(o,0,t,n+1),e;if(t>=r&&t<a&&n+1<=a)return e;t>=r&&t<a||a==t?(e[o+1]=n+1,s=!0):t<=r&&n+1>=a&&(e[o]=t,e[o+1]=n+1,s=!0)}o+=2}return s||e.push(t,n+1),e},k=function(e,t){var n=0,r=e.length,a=e[n],o=e[r-1];if(r>=2&&(t<a||t>o))return!1;for(;n<r;){if(a=e[n],o=e[n+1],t>=a&&t<o)return!0;n+=2}return!1},S=function(e){return!e.length},A=function(e){return 2==e.length&&e[0]+1==e[1]},I=function(e){for(var t,n,r=0,a=[],o=e.length;r<o;){for(t=e[r],n=e[r+1];t<n;)a.push(t),++t;r+=2}return a},O=Math.floor,j=function(e){return parseInt(O((e-65536)/1024)+55296,10)},P=function(e){return parseInt((e-65536)%1024+56320,10)},F=String.fromCharCode,U=function(e){return 9==e?"\\t":10==e?"\\n":12==e?"\\f":13==e?"\\r":45==e?"\\x2D":92==e?"\\\\":36==e||e>=40&&e<=43||46==e||47==e||63==e||e>=91&&e<=94||e>=123&&e<=125?"\\"+F(e):e>=32&&e<=126?F(e):e<=255?"\\x"+y(_(e),2):"\\u"+y(_(e),4)},$=function(e){return e<=65535?U(e):"\\u{"+e.toString(16).toUpperCase()+"}"},D=function(e){var t=e.length,n=e.charCodeAt(0);return n>=55296&&n<=56319&&t>1?1024*(n-55296)+e.charCodeAt(1)-56320+65536:n},N=function(e){var t,n,r="",a=0,o=e.length;if(A(e))return U(e[0]);for(;a<o;)r+=(t=e[a])==(n=e[a+1]-1)?U(t):t+1==n?U(t)+U(n):U(t)+"-"+U(n),a+=2;return"["+r+"]"},L=function(e){if(1==e.length)return e;for(var t=-1,n=-1;++t<e.length;){var r=e[t],a=r[1],o=a[0],s=a[1];for(n=t;++n<e.length;){var i=e[n],u=i[1],c=u[0],f=u[1];o==c&&s==f&&(A(i[0])?r[0]=R(r[0],i[0][0]):r[0]=C(r[0],i[0][0],i[0][1]-1),e.splice(n,1),--n)}}return e},B=function(e){if(!e.length)return[];for(var t,n,r,a,o,s,i=0,u=[],c=e.length;i<c;){t=e[i],n=e[i+1]-1,r=j(t),a=P(t),o=j(n);var f=57343==(s=P(n)),l=!1;r==o||56320==a&&f?(u.push([[r,o+1],[a,s+1]]),l=!0):u.push([[r,r+1],[a,57344]]),!l&&r+1<o&&(f?(u.push([[r+1,o+1],[56320,s+1]]),l=!0):u.push([[r+1,o],[56320,57344]])),l||u.push([[o,o+1],[56320,s+1]]),i+=2}return function(e){for(var t,n,r,a,o,s,i=[],u=[],c=!1,f=-1,l=e.length;++f<l;)if(t=e[f],n=e[f+1]){for(r=t[0],a=t[1],o=n[0],s=n[1],u=a;o&&r[0]==o[0]&&r[1]==o[1];)u=A(s)?R(u,s[0]):C(u,s[0],s[1]-1),r=(t=e[++f])[0],a=t[1],o=(n=e[f+1])&&n[0],s=n&&n[1],c=!0;i.push([r,c?u:a]),c=!1}else i.push(t);return L(i)}(u)},T=function(e,t,n){if(n)return function(e){var t,n,r="",a=0,o=e.length;if(A(e))return $(e[0]);for(;a<o;)r+=(t=e[a])==(n=e[a+1]-1)?$(t):t+1==n?$(t)+$(n):$(t)+"-"+$(n),a+=2;return"["+r+"]"}(e);var r=[],a=function(e){for(var t,n,r=[],a=[],o=[],s=[],i=0,u=e.length;i<u;)t=e[i],n=e[i+1]-1,t<55296?(n<55296&&o.push(t,n+1),n>=55296&&n<=56319&&(o.push(t,55296),r.push(55296,n+1)),n>=56320&&n<=57343&&(o.push(t,55296),r.push(55296,56320),a.push(56320,n+1)),n>57343&&(o.push(t,55296),r.push(55296,56320),a.push(56320,57344),n<=65535?o.push(57344,n+1):(o.push(57344,65536),s.push(65536,n+1)))):t>=55296&&t<=56319?(n>=55296&&n<=56319&&r.push(t,n+1),n>=56320&&n<=57343&&(r.push(t,56320),a.push(56320,n+1)),n>57343&&(r.push(t,56320),a.push(56320,57344),n<=65535?o.push(57344,n+1):(o.push(57344,65536),s.push(65536,n+1)))):t>=56320&&t<=57343?(n>=56320&&n<=57343&&a.push(t,n+1),n>57343&&(a.push(t,57344),n<=65535?o.push(57344,n+1):(o.push(57344,65536),s.push(65536,n+1)))):t>57343&&t<=65535?n<=65535?o.push(t,n+1):(o.push(t,65536),s.push(65536,n+1)):s.push(t,n+1),i+=2;return{loneHighSurrogates:r,loneLowSurrogates:a,bmp:o,astral:s}}(e),o=a.loneHighSurrogates,s=a.loneLowSurrogates,i=a.bmp,u=a.astral,c=!S(o),f=!S(s),l=B(u);return t&&(i=w(i,o),c=!1,i=w(i,s),f=!1),S(i)||r.push(N(i)),l.length&&r.push(function(e){var t=[];return p(e,function(e){var n=e[0],r=e[1];t.push(N(n)+N(r))}),t.join("|")}(l)),c&&r.push(N(o)+"(?![\\uDC00-\\uDFFF])"),f&&r.push("(?:[^\\uD800-\\uDBFF]|^)"+N(s)),r.join("|")},z=function(e){return arguments.length>1&&(e=m.call(arguments)),this instanceof z?(this.data=[],e?this.add(e):this):(new z).add(e)};z.version="1.3.3";var Z=z.prototype;!function(e,t){var n;for(n in t)d.call(t,n)&&(e[n]=t[n])}(Z,{add:function(e){var t=this;return null==e?t:e instanceof z?(t.data=w(t.data,e.data),t):(arguments.length>1&&(e=m.call(arguments)),g(e)?(p(e,function(e){t.add(e)}),t):(t.data=R(t.data,v(e)?e:D(e)),t))},remove:function(e){var t=this;return null==e?t:e instanceof z?(t.data=E(t.data,e.data),t):(arguments.length>1&&(e=m.call(arguments)),g(e)?(p(e,function(e){t.remove(e)}),t):(t.data=b(t.data,v(e)?e:D(e)),t))},addRange:function(e,t){return this.data=C(this.data,v(e)?e:D(e),v(t)?t:D(t)),this},removeRange:function(e,t){var n=v(e)?e:D(e),r=v(t)?t:D(t);return this.data=x(this.data,n,r),this},intersection:function(e){var t=e instanceof z?I(e.data):e;return this.data=function(e,t){for(var n,r=0,a=t.length,o=[];r<a;)n=t[r],k(e,n)&&o.push(n),++r;return function(e){for(var t,n=-1,r=e.length,a=r-1,o=[],s=!0,i=0;++n<r;)if(t=e[n],s)o.push(t),i=t,s=!1;else if(t==i+1){if(n!=a){i=t;continue}s=!0,o.push(t+1)}else o.push(i+1,t),i=t;return s||o.push(t+1),o}(o)}(this.data,t),this},contains:function(e){return k(this.data,v(e)?e:D(e))},clone:function(){var e=new z;return e.data=this.data.slice(0),e},toString:function(e){var t=T(this.data,!!e&&e.bmpOnly,!!e&&e.hasUnicodeFlag);return t?t.replace(f,"\\0$1"):"[]"},toRegExp:function(e){var t=this.toString(e&&-1!=e.indexOf("u")?{hasUnicodeFlag:!0}:null);return RegExp(t,e||"")},valueOf:function(){return I(this.data)}}),Z.toArray=Z.valueOf,void 0===(a=function(){return z}.call(t,n,t,e))||(e.exports=a)}()}).call(this,n(0)(e),n(1))},function(e,t,n){t.parse=n(6),t.stringify=n(11),t.parseValues=n(12),t.stringifyValues=n(13)},function(e,t,n){"use strict";var r=n(2),a=n(3);function o(e){return e.replace(/\\(.)/g,"$1")}function s(e,t){this.selector.nodes.push({type:"comment",content:t})}function i(e){return function(t,n){this.selector.nodes.push({type:e,name:o(n)})}}function u(e,t){var n={type:"pseudo-class",name:o(t),content:""};return this.selector.nodes.push(n),this.token=n,this.brackets=1,"inBrackets"}function c(e,t,n){var r={type:"selector",nodes:[]},a={type:"nested-pseudo-class",name:o(t),nodes:[r]};n&&(r.before=n),this.selector.nodes.push(a),this.stack.push(this.root),this.root=a,this.selector=r}function f(e,t){this.stack.length>0?(t&&(this.selector.after=t),this.root=this.stack.pop(),this.selector=this.root.nodes[this.root.nodes.length-1]):this.selector.nodes.push({type:"invalid",value:e})}function l(e,t,n,r){var a={type:"operator",operator:n};t&&(a.before=t),r&&(a.after=r),this.selector.nodes.push(a)}function d(e){this.selector.nodes.push({type:"spacing",value:e})}function p(e,t,n){var r={type:"element",name:o(n)};t&&(r.namespace=o(t.substr(0,t.length-1))),this.selector.nodes.push(r)}function h(e,t){var n={type:"universal"};t&&(n.namespace=o(t.substr(0,t.length-1))),this.selector.nodes.push(n)}function g(e,t){this.selector.nodes.push({type:"attribute",content:t})}function v(e){this.selector.nodes.push({type:"invalid",value:e})}function y(e){this.selector.before=e}function _(e){this.selector.after=e}function m(e,t,n){var r={type:"selector",nodes:[]};t&&(this.selector.after=t),n&&(r.before=n),this.root.nodes.push(r),this.selector=r}function b(e){this.token.content+=e}var x=new r({selector:function(){var e={"/\\*([\\s\\S]*?)\\*/":s};e[a("\\.((?:\\\\.|[A-Za-z_\\-\\u{00a0}-\\u{10ffff}])(?:\\\\.|[A-Za-z_\\-0-9\\u{00a0}-\\u{10ffff}])*)","u")]=i("class"),e[a("#((?:\\\\.|[A-Za-z_\\-\\u{00a0}-\\u{10ffff}])(?:\\\\.|[A-Za-z_\\-0-9\\u{00a0}-\\u{10ffff}])*)","u")]=i("id");var t,n={":(not|matches|has|local|global)\\((\\s*)":c,":((?:\\\\.|[A-Za-z_\\-0-9])+)\\(":u,":((?:\\\\.|[A-Za-z_\\-0-9])+)":i("pseudo-class"),"::((?:\\\\.|[A-Za-z_\\-0-9])+)":i("pseudo-element"),"(\\*\\|)((?:\\\\.|[A-Za-z_\\-0-9])+)":p,"(\\*\\|)\\*":h,"((?:\\\\.|[A-Za-z_\\-0-9])*\\|)?\\*":h,"((?:\\\\.|[A-Za-z_\\-0-9])*\\|)?((?:\\\\.|[A-Za-z_\\-])(?:\\\\.|[A-Za-z_\\-0-9])*)":p,"\\[([^\\]]+)\\]":g,"(\\s*)\\)":f,"(\\s*)((?:\\|\\|)|(?:>>)|[>+~])(\\s*)":l,"(\\s*),(\\s*)":m,"\\s+$":_,"^\\s+":y,"\\s+":d,".":v};for(t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t]);return e}(),inBrackets:{"/\\*[\\s\\S]*?\\*/":b,'"([^\\\\"]|\\\\.)*"':b,"'([^\\\\']|\\\\.)*'":b,"[^()'\"/]+":b,"\\(":function(e){this.token.content+=e,this.brackets++},"\\)":function(e){if(0==--this.brackets)return"selector";this.token.content+=e},".":b}});e.exports=function(e){var t={type:"selector",nodes:[]},n={type:"selectors",nodes:[t]};return x.parse("selector",e,{stack:[],root:n,selector:t}),n}},function(e,t,n){(function(e,r){var a;
/*!
 * RegJSGen
 * Copyright 2014 Benjamin Tan <https://d10.github.io/>
 * Available under MIT license <http://d10.mit-license.org/>
 */(function(){"use strict";var o={function:!0,object:!0},s=(o[typeof window]&&window,o[typeof t]&&t),i=o[typeof e]&&e&&!e.nodeType&&e,u=s&&i&&"object"==typeof r&&r;!u||u.global!==u&&u.window!==u&&u.self;
/*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */var c=String.fromCharCode,f=Math.floor;function l(){var e,t,n=[],r=-1,a=arguments.length;if(!a)return"";for(var o="";++r<a;){var s=Number(arguments[r]);if(!isFinite(s)||s<0||s>1114111||f(s)!=s)throw RangeError("Invalid code point: "+s);s<=65535?n.push(s):(e=55296+((s-=65536)>>10),t=s%1024+56320,n.push(e,t)),(r+1==a||n.length>16384)&&(o+=c.apply(null,n),n.length=0)}return o}function d(e,t){if(-1==t.indexOf("|")){if(e==t)return;throw Error("Invalid node type: "+e)}if(!(t=d.hasOwnProperty(t)?d[t]:d[t]=RegExp("^(?:"+t+")$")).test(e))throw Error("Invalid node type: "+e)}function p(e){var t=e.type;if(p.hasOwnProperty(t)&&"function"==typeof p[t])return p[t](e);throw Error("Invalid node type: "+t)}function h(e){return d(e.type,"anchor|characterClassEscape|characterClassRange|dot|value"),p(e)}function g(e){return d(e.type,"anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value"),p(e)}p.alternative=function(e){d(e.type,"alternative");var t=e.body,n=t?t.length:0;if(1==n)return g(t[0]);for(var r=-1,a="";++r<n;)a+=g(t[r]);return a},p.anchor=function(e){switch(d(e.type,"anchor"),e.kind){case"start":return"^";case"end":return"$";case"boundary":return"\\b";case"not-boundary":return"\\B";default:throw Error("Invalid assertion")}},p.characterClass=function(e){d(e.type,"characterClass");var t=e.body,n=t?t.length:0,r=-1,a="[";for(e.negative&&(a+="^");++r<n;)a+=h(t[r]);return a+="]"},p.characterClassEscape=function(e){return d(e.type,"characterClassEscape"),"\\"+e.value},p.characterClassRange=function(e){d(e.type,"characterClassRange");var t=e.min,n=e.max;if("characterClassRange"==t.type||"characterClassRange"==n.type)throw Error("Invalid character class range");return h(t)+"-"+h(n)},p.disjunction=function(e){d(e.type,"disjunction");var t=e.body,n=t?t.length:0;if(0==n)throw Error("No body");if(1==n)return p(t[0]);for(var r=-1,a="";++r<n;)0!=r&&(a+="|"),a+=p(t[r]);return a},p.dot=function(e){return d(e.type,"dot"),"."},p.group=function(e){d(e.type,"group");var t="(";switch(e.behavior){case"normal":break;case"ignore":t+="?:";break;case"lookahead":t+="?=";break;case"negativeLookahead":t+="?!";break;default:throw Error("Invalid behaviour: "+e.behaviour)}var n=e.body,r=n?n.length:0;if(1==r)t+=p(n[0]);else for(var a=-1;++a<r;)t+=p(n[a]);return t+=")"},p.quantifier=function(e){d(e.type,"quantifier");var t="",n=e.min,r=e.max;switch(r){case void 0:case null:switch(n){case 0:t="*";break;case 1:t="+";break;default:t="{"+n+",}"}break;default:t=n==r?"{"+n+"}":0==n&&1==r?"?":"{"+n+","+r+"}"}return e.greedy||(t+="?"),function(e){return d(e.type,"anchor|characterClass|characterClassEscape|dot|group|reference|value"),p(e)}(e.body[0])+t},p.reference=function(e){return d(e.type,"reference"),"\\"+e.matchIndex},p.value=function(e){d(e.type,"value");var t=e.kind,n=e.codePoint;switch(t){case"controlLetter":return"\\c"+l(n+64);case"hexadecimalEscape":return"\\x"+("00"+n.toString(16).toUpperCase()).slice(-2);case"identifier":return"\\"+l(n);case"null":return"\\"+n;case"octal":return"\\"+n.toString(8);case"singleEscape":switch(n){case 8:return"\\b";case 9:return"\\t";case 10:return"\\n";case 11:return"\\v";case 12:return"\\f";case 13:return"\\r";default:throw Error("Invalid codepoint: "+n)}case"symbol":return l(n);case"unicodeEscape":return"\\u"+("0000"+n.toString(16).toUpperCase()).slice(-4);case"unicodeCodePointEscape":return"\\u{"+n.toString(16).toUpperCase()+"}";default:throw Error("Unsupported node kind: "+t)}},void 0===(a=function(){return{generate:p}}.call(t,n,t,e))||(e.exports=a)}).call(this)}).call(this,n(0)(e),n(1))},function(e,t,n){var r;r={parse:function(e,t){function n(t){return t.raw=e.substring(t.range[0],t.range[1]),t}function r(e,t){return e.range[0]=t,n(e)}function a(e,t){return n({type:"anchor",kind:e,range:[U-t,U]})}function o(e,t,r,a){return n({type:"value",kind:e,codePoint:t,range:[r,a]})}function s(e,t,n,r){return r=r||0,o(e,t,U-(n.length+r),U)}function i(e){var t,n=e[0],r=n.charCodeAt(0);return F&&1===n.length&&r>=55296&&r<=56319&&(t=g().charCodeAt(0))>=56320&&t<=57343?o("symbol",1024*(r-55296)+t-56320+65536,++U-2,U):o("symbol",r,U-1,U)}function u(e,t,r,a){return null==a&&(r=U-1,a=U),n({type:"quantifier",min:e,max:t,greedy:!0,body:null,range:[r,a]})}function c(e,t,r,a){return n({type:"characterClass",body:e,negative:t,range:[r,a]})}function f(e,t,r,a){return e.codePoint>t.codePoint&&I("invalid range in character class",e.raw+"-"+t.raw,r,a),n({type:"characterClassRange",min:e,max:t,range:[r,a]})}function l(e){return"alternative"===e.type?e.body:[e]}function d(t){t=t||1;var n=e.substring(U,U+t);return U+=t||1,n}function p(e){h(e)||I("character",e)}function h(t){if(e.indexOf(t,U)===U)return d(t.length)}function g(){return e[U]}function v(t){return e.indexOf(t,U)===U}function y(t){return e[U+1]===t}function _(t){var n=e.substring(U).match(t);return n&&(n.range=[],n.range[0]=U,d(n[0].length),n.range[1]=U),n}function m(){var e=[],t=U;for(e.push(b());h("|");)e.push(b());return 1===e.length?e[0]:function(e,t,r){return n({type:"disjunction",body:e,range:[t,r]})}(e,t,U)}function b(){for(var e,t=[],r=U;e=x();)t.push(e);return 1===t.length?t[0]:function(e,t,r){return n({type:"alternative",body:e,range:[t,r]})}(t,r,U)}function x(){if(U>=e.length||v("|")||v(")"))return null;var t=h("^")?a("start",1):h("$")?a("end",1):h("\\b")?a("boundary",2):h("\\B")?a("not-boundary",2):R("(?=","lookahead","(?!","negativeLookahead");if(t)return t;var o,s=(o=_(/^[^^$\\.*+?(){[|]/))?i(o):h(".")?n({type:"dot",range:[U-1,U]}):h("\\")?((o=C())||I("atomEscape"),o):(o=function(){var e,t=U;return(e=_(/^\[\^/))?(e=k(),p("]"),c(e,!0,t,U)):h("[")?(e=k(),p("]"),c(e,!1,t,U)):null}())?o:R("(?:","ignore","(","normal");s||I("Expected atom");var f=function(){var e,t,n,r,a=U;return h("*")?t=u(0):h("+")?t=u(1):h("?")?t=u(0,1):(e=_(/^\{([0-9]+)\}/))?(n=parseInt(e[1],10),t=u(n,n,e.range[0],e.range[1])):(e=_(/^\{([0-9]+),\}/))?(n=parseInt(e[1],10),t=u(n,void 0,e.range[0],e.range[1])):(e=_(/^\{([0-9]+),([0-9]+)\}/))&&(n=parseInt(e[1],10),r=parseInt(e[2],10),n>r&&I("numbers out of order in {} quantifier","",a,U),t=u(n,r,e.range[0],e.range[1])),t&&h("?")&&(t.greedy=!1,t.range[1]+=1),t}()||!1;return f?(f.body=l(s),r(f,s.range[0]),f):s}function R(e,t,r,a){var o=null,s=U;if(h(e))o=t;else{if(!h(r))return!1;o=a}var i=m();i||I("Expected disjunction"),p(")");var u=function(e,t,r,a){return n({type:"group",behavior:e,body:t,range:[r,a]})}(o,l(i),s,U);return"normal"==o&&P&&j++,u}function w(e){var t,r;if(F&&"unicodeEscape"==e.kind&&(t=e.codePoint)>=55296&&t<=56319&&v("\\")&&y("u")){var a=U;U++;var o=E();"unicodeEscape"==o.kind&&(r=o.codePoint)>=56320&&r<=57343?(e.range[1]=o.range[1],e.codePoint=1024*(t-55296)+r-56320+65536,e.type="value",e.kind="unicodeCodePointEscape",n(e)):U=a}return e}function E(){return C(!0)}function C(e){var t,a=U;if(t=function(){var e,t,a;if(e=_(/^(?!0)\d+/)){t=e[0];var o=parseInt(e[0],10);return o<=j?(a=e[0],n({type:"reference",matchIndex:parseInt(a,10),range:[U-1-a.length,U]})):(O.push(o),d(-e[0].length),(e=_(/^[0-7]{1,3}/))?s("octal",parseInt(e[0],8),e[0],1):r(e=i(_(/^[89]/)),e.range[0]-1))}return(e=_(/^[0-7]{1,3}/))?(t=e[0],/^0{1,3}$/.test(t)?s("null",0,"0",t.length+1):s("octal",parseInt(t,8),t,1)):!!(e=_(/^[dDsSwW]/))&&n({type:"characterClassEscape",value:e[0],range:[U-2,U]})}())return t;if(e){if(h("b"))return s("singleEscape",8,"\\b");h("B")&&I("\\B not possible inside of CharacterClass","",a)}return t=function(){var e,t,n,r;if(e=_(/^[fnrtv]/)){var a=0;switch(e[0]){case"t":a=9;break;case"n":a=10;break;case"v":a=11;break;case"f":a=12;break;case"r":a=13}return s("singleEscape",a,"\\"+e[0])}return(e=_(/^c([a-zA-Z])/))?s("controlLetter",e[1].charCodeAt(0)%32,e[1],2):(e=_(/^x([0-9a-fA-F]{2})/))?s("hexadecimalEscape",parseInt(e[1],16),e[1],2):(e=_(/^u([0-9a-fA-F]{4})/))?w(s("unicodeEscape",parseInt(e[1],16),e[1],2)):F&&(e=_(/^u\{([0-9a-fA-F]+)\}/))?s("unicodeCodePointEscape",parseInt(e[1],16),e[1],4):(n=g(),r=new RegExp("[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ̀-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԯԱ-Ֆՙա-և֑-ׇֽֿׁׂׅׄא-תװ-ײؐ-ؚؠ-٩ٮ-ۓە-ۜ۟-۪ۨ-ۼۿܐ-݊ݍ-ޱ߀-ߵߺࠀ-࠭ࡀ-࡛ࢠ-ࢲࣤ-ॣ०-९ॱ-ঃঅ-ঌএঐও-নপ-রলশ-হ়-ৄেৈো-ৎৗড়ঢ়য়-ৣ০-ৱਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹ਼ਾ-ੂੇੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-૯ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହ଼-ୄେୈୋ-୍ୖୗଡ଼ଢ଼ୟ-ୣ୦-୯ୱஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-௯ఀ-ఃఅ-ఌఎ-ఐఒ-నప-హఽ-ౄె-ైొ-్ౕౖౘౙౠ-ౣ౦-౯ಁ-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕೖೞೠ-ೣ೦-೯ೱೲഁ-ഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-ൎൗൠ-ൣ൦-൯ൺ-ൿංඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟ෦-෯ෲෳก-ฺเ-๎๐-๙ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໟༀ༘༙༠-༩༹༵༷༾-ཇཉ-ཬཱ-྄྆-ྗྙ-ྼ࿆က-၉ၐ-ႝႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፝-፟ᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-᜔ᜠ-᜴ᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲᝳក-៓ៗៜ៝០-៩᠋-᠍᠐-᠙ᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤞᤠ-ᤫᤰ-᤻᥆-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉ᧐-᧙ᨀ-ᨛᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙ᪧ᪰-᪽ᬀ-ᭋ᭐-᭙᭫-᭳ᮀ-᯳ᰀ-᰷᱀-᱉ᱍ-ᱽ᳐-᳔᳒-ᳶ᳸᳹ᴀ-᷵᷼-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‌‍‿⁀⁔ⁱⁿₐ-ₜ⃐-⃥⃜⃡-⃰ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ⵿-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〇〡-〯〱-〵〸-〼ぁ-ゖ゙゚ゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘫꙀ-꙯ꙴ-꙽ꙿ-ꚝꚟ-꛱ꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠧꡀ-ꡳꢀ-꣄꣐-꣙꣠-ꣷꣻ꤀-꤭ꤰ-꥓ꥠ-ꥼꦀ-꧀ꧏ-꧙ꧠ-ꧾꨀ-ꨶꩀ-ꩍ꩐-꩙ꩠ-ꩶꩺ-ꫂꫛ-ꫝꫠ-ꫯꫲ-꫶ꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯪ꯬꯭꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ︀-️︠-︭︳︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]"),36===n||95===n||n>=65&&n<=90||n>=97&&n<=122||n>=48&&n<=57||92===n||n>=128&&r.test(String.fromCharCode(n))?h("‌")?s("identifier",8204,"‌"):h("‍")?s("identifier",8205,"‍"):null:s("identifier",(t=d()).charCodeAt(0),t,1))}()}function k(){var e,t;return v("]")?[]:((t=A())||I("classAtom"),(e=v("]")?[t]:S(t))||I("nonEmptyClassRanges"),e)}function S(e){var t,n,r;if(v("-")&&!y("]")){p("-"),(r=A())||I("classAtom"),n=U;var a=k();return a||I("classRanges"),t=e.range[0],"empty"===a.type?[f(e,r,t,n)]:[f(e,r,t,n)].concat(a)}return(r=function(){var e=A();return e||I("classAtom"),v("]")?e:S(e)}())||I("nonEmptyClassRangesNoDash"),[e].concat(r)}function A(){return h("-")?i("-"):(e=_(/^[^\\\]-]/))?i(e[0]):h("\\")?((e=E())||I("classEscape"),w(e)):void 0;var e}function I(t,n,r,a){r=null==r?U:r,a=null==a?r:a;var o=Math.max(0,r-10),s=Math.min(a+10,e.length),i="    "+e.substring(o,s),u="    "+new Array(r-o+1).join(" ")+"^";throw SyntaxError(t+" at position "+r+(n?": "+n:"")+"\n"+i+"\n"+u)}var O=[],j=0,P=!0,F=-1!==(t||"").indexOf("u"),U=0;""===(e=String(e))&&(e="(?:)");var $=m();$.range[1]!==e.length&&I("Could not parse entire input - got stuck","",$.range[1]);for(var D=0;D<O.length;D++)if(O[D]<=j)return U=0,P=!1,m();return $}},e.exports?e.exports=r:window.regjsparser=r},function(e){e.exports=JSON.parse('{}')},function(e,t,n){var r=n(4);t.REGULAR={d:r().addRange(48,57),D:r().addRange(0,47).addRange(58,65535),s:r(32,160,5760,6158,8239,8287,12288,65279).addRange(9,13).addRange(8192,8202).addRange(8232,8233),S:r().addRange(0,8).addRange(14,31).addRange(33,159).addRange(161,5759).addRange(5761,6157).addRange(6159,8191).addRange(8203,8231).addRange(8234,8238).addRange(8240,8286).addRange(8288,12287).addRange(12289,65278).addRange(65280,65535),w:r(95).addRange(48,57).addRange(65,90).addRange(97,122),W:r(96).addRange(0,47).addRange(58,64).addRange(91,94).addRange(123,65535)},t.UNICODE={d:r().addRange(48,57),D:r().addRange(0,47).addRange(58,1114111),s:r(32,160,5760,6158,8239,8287,12288,65279).addRange(9,13).addRange(8192,8202).addRange(8232,8233),S:r().addRange(0,8).addRange(14,31).addRange(33,159).addRange(161,5759).addRange(5761,6157).addRange(6159,8191).addRange(8203,8231).addRange(8234,8238).addRange(8240,8286).addRange(8288,12287).addRange(12289,65278).addRange(65280,1114111),w:r(95).addRange(48,57).addRange(65,90).addRange(97,122),W:r(96).addRange(0,47).addRange(58,64).addRange(91,94).addRange(123,1114111)},t.UNICODE_IGNORE_CASE={d:r().addRange(48,57),D:r().addRange(0,47).addRange(58,1114111),s:r(32,160,5760,6158,8239,8287,12288,65279).addRange(9,13).addRange(8192,8202).addRange(8232,8233),S:r().addRange(0,8).addRange(14,31).addRange(33,159).addRange(161,5759).addRange(5761,6157).addRange(6159,8191).addRange(8203,8231).addRange(8234,8238).addRange(8240,8286).addRange(8288,12287).addRange(12289,65278).addRange(65280,1114111),w:r(95,383,8490).addRange(48,57).addRange(65,90).addRange(97,122),W:r(75,83,96).addRange(0,47).addRange(58,64).addRange(91,94).addRange(123,1114111)}},function(e,t,n){"use strict";var r,a=n(3),o=new RegExp(a("(^[^A-Za-z_\\-\\u{00a0}-\\u{10ffff}]|^\\-\\-|[^A-Za-z_0-9\\-\\u{00a0}-\\u{10ffff}])","ug"),"g");function s(e,t){return"*"===e?"*":t?e.replace(o,"\\$1"):e.replace(/(^[^A-Za-z_\\-]|^\-\-|[^A-Za-z_0-9\\-])/g,"\\$1")}function i(e){switch(e.type){case"selectors":return e.nodes.map(r).join(",");case"selector":return e.nodes.map(r).join("");case"element":return("string"==typeof e.namespace?s(e.namespace)+"|":"")+s(e.name);case"class":return"."+s(e.name,!0);case"id":return"#"+s(e.name,!0);case"attribute":return"["+e.content+"]";case"spacing":return e.value;case"pseudo-class":return":"+s(e.name)+("string"==typeof e.content?"("+e.content+")":"");case"nested-pseudo-class":return":"+s(e.name)+"("+e.nodes.map(r).join(",")+")";case"pseudo-element":return"::"+s(e.name);case"universal":return("string"==typeof e.namespace?s(e.namespace)+"|":"")+"*";case"operator":return e.operator;case"comment":return"/*"+e.content+"*/";case"invalid":return e.value}}r=function(e){var t=i(e);return e.before&&(t=e.before+t),e.after&&(t+=e.after),t},e.exports=r},function(e,t,n){"use strict";function r(e){return e.replace(/\\(?:([a-fA-F0-9]{1,6})|(.))/g,function(e,t,n){if(n)return n;var r=parseInt(t,16);return r<65536?String.fromCharCode(r):String.fromCharCode(Math.floor((r-65536)/1024)+55296)+String.fromCharCode((r-65536)%1024+56320)})}function a(e,t){var n=r(t);this.value.nodes.push({type:"string",value:n,stringType:e[0]})}function o(e,t,n,a){var o={type:"url"};switch(t&&(o.innerSpacingBefore=t),a&&(o.innerSpacingAfter=a),n[0]){case'"':o.stringType='"',o.url=r(n.substr(1,n.length-2));break;case"'":o.stringType="'",o.url=r(n.substr(1,n.length-2));break;default:o.url=r(n)}this.value.nodes.push(o)}var s=new(n(2))({decl:{"^\\s+":function(e){this.value.before=e},"/\\*([\\s\\S]*?)\\*/":function(e,t){this.value.nodes.push({type:"comment",content:t})},'"((?:[^\\\\"]|\\\\.)*)"':a,"'((?:[^\\\\']|\\\\.)*)'":a,'url\\((\\s*)("(?:[^\\\\"]|\\\\.)*")(\\s*)\\)':o,"url\\((\\s*)('(?:[^\\\\']|\\\\.)*')(\\s*)\\)":o,"url\\((\\s*)((?:[^\\\\)'\"]|\\\\.)*)(\\s*)\\)":o,"([\\w-]+)\\((\\s*)":function(e,t,n){this.stack.push(this.root),this.root={type:"nested-item",name:t,nodes:[{type:"value",nodes:[]}]},n&&(this.root.nodes[0].before=n),this.value.nodes.push(this.root),this.value=this.root.nodes[0]},"(\\s*)(\\))":function(e,t,n){if(0===this.stack.length){if(t){var r=this.value.nodes[this.value.nodes.length-1];r.after=(r.after||"")+t}this.value.nodes.push({type:"invalid",value:n})}else t&&(this.value.after=t),this.root=this.stack.pop(),this.value=this.root.nodes[this.root.nodes.length-1]},",(\\s*)":function(e,t){var n={type:"value",nodes:[]};t&&(n.before=t),this.root.nodes.push(n),this.value=n},"\\s+$":function(e){this.value.after=e},"\\s+":function(e){var t=this.value.nodes[this.value.nodes.length-1];t.after=(t.after||"")+e},"[^\\s,)]+":function(e){this.value.nodes.push({type:"item",name:e})}}});e.exports=function(e){var t={type:"value",nodes:[]},n={type:"values",nodes:[t]};return s.parse("decl",e,{stack:[],root:n,value:t}),n}},function(e,t,n){"use strict";var r,a=n(14);function o(e,t){return a(e,{quotes:'"'===t?"double":"single"})}function s(e){switch(e.type){case"values":return e.nodes.map(r).join(",");case"value":return e.nodes.map(r).join("");case"item":return e.name;case"nested-item":return e.name+"("+e.nodes.map(r).join(",")+")";case"invalid":return e.value;case"comment":return"/*"+e.content+"*/";case"string":switch(e.stringType){case"'":return"'"+o(e.value,"'")+"'";case'"':return'"'+o(e.value,'"')+'"'}throw new Error("Invalid stringType");case"url":var t="url("+(e.innerSpacingBefore||""),n=(e.innerSpacingAfter||"")+")";switch(e.stringType){case"'":return t+"'"+e.url.replace(/(\\)/g,"\\$1").replace(/'/g,"\\'")+"'"+n;case'"':return t+'"'+e.url.replace(/(\\)/g,"\\$1").replace(/"/g,'\\"')+'"'+n;default:return t+e.url.replace(/("|'|\)|\\)/g,"\\$1")+n}}}r=function(e){var t=s(e);return e.before&&(t=e.before+t),e.after&&(t+=e.after),t},e.exports=r},function(e,t,n){(function(e,r){var a;/*! http://mths.be/cssesc v0.1.0 by @mathias */!function(o){var s=t,i=(e&&e.exports,"object"==typeof r&&r);i.global!==i&&i.window;var u={}.hasOwnProperty,c=/[\x20-\x2C\x2E\x2F\x3B-\x40\x5B-\x5E\x60\x7B-\x7E]/,f=/[\x20\x21\x23-\x26\x28-\x2C\x2E\x2F\x3B-\x40\x5B\x5D\x5E\x60\x7B-\x7E]/,l=/(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g,d=function(e,t){"single"!=(t=function(e,t){if(!e)return t;var n,r={};for(n in t)r[n]=u.call(e,n)?e[n]:t[n];return r}(t,d.options)).quotes&&"double"!=t.quotes&&(t.quotes="single");for(var n,r,a,o,s="double"==t.quotes?'"':"'",i=t.isIdentifier,p=e.charAt(0),h="",g=0,v=e.length;g<v;)(a=(r=e.charAt(g++)).charCodeAt())<32||a>126?(a>=55296&&a<=56319&&g<v&&(56320==(64512&(o=e.charCodeAt(g++)))?a=((1023&a)<<10)+(1023&o)+65536:g--),n="\\"+a.toString(16).toUpperCase()+" "):n=t.escapeEverything?c.test(r)?"\\"+r:"\\"+a.toString(16).toUpperCase()+" ":/[\t\n\f\r\x0B:]/.test(r)?i||":"!=r?"\\"+a.toString(16).toUpperCase()+" ":r:"\\"==r||!i&&('"'==r&&s==r||"'"==r&&s==r)||i&&f.test(r)?"\\"+r:r,h+=n;return i&&(/^_/.test(h)?h="\\_"+h.slice(1):/^-[-\d]/.test(h)?h="\\-"+h.slice(1):/\d/.test(p)&&(h="\\3"+p+" "+h.slice(1))),h=h.replace(l,function(e,t,n){return t&&t.length%2?e:(t||"")+n}),!i&&t.wrap?s+h+s:h};d.options={escapeEverything:!1,isIdentifier:!1,quotes:"single",wrap:!1},d.version="0.1.0",void 0===(a=function(){return d}.call(t,n,t,e))||(e.exports=a)}()}).call(this,n(0)(e),n(1))},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"isUploadedFontFamily",function(){return g}),n.d(r,"getUploadedFontFaceStyles",function(){return v}),n.d(r,"getUploadedId",function(){return y});var a={};n.r(a),n.d(a,"findFontsInAst",function(){return m}),n.d(a,"processDeclarationFonts",function(){return b});const o=":import {-st-from: '/site.st.css'; -st-named: site_1_1, site_2_1, site_3_1, site_4_1, site_5_1, site_1_2, site_2_2, site_3_2, site_4_2, site_5_2, site_1_3, site_2_3, site_3_3, site_4_3, site_5_3, site_1_4, site_2_4, site_3_4, site_4_4, site_5_4, site_1_5, site_2_5, site_3_5, site_4_5, site_5_5;}\n",s=":import {-st-from: 'wix-media-url';-st-default: wixMediaUrl;}\n",i=11,u=5;function c(e){let t=1,n=1,r="";return void 0!==e.color&&(r=e.color.slice(i).map(e=>{const r=`    site_${t}_${n}: ${e};`;return++n===u+1&&(t++,n=1),r}).join("\n")),`:vars {\n${r}\n}`}const f={siteColors:!0,additionalJsModules:!1},l=(e,t=f)=>`${t.siteColors?o:""}${t.additionalJsModules?s:""}${e}`,d=e=>e.replace(o,"").replace(s,""),p={UPLOADED_FONT_PREFIX:"wf_",LONG_UPLOADED_FONT_PREFIX:"wfont_",POSSIBLE_CHARACTERS_SETS:["latin-ext","cyrillic","japanese","korean","arabic","hebrew","latin"],FONT_GROUPS:{"my-uploads":"text_editor_font_dropdown_my_fonts",latin:"text_editor_font_dropdown_all_fonts","latin-ext":"add_languages_eastern_european",cyrillic:"add_languages_cyrillic",japanese:"add_languages_japanese",korean:"add_languages_korean",arabic:"add_languages_arabic",hebrew:"add_languages_hebrew"},LANG_TO_EXAMPLE_KEY:{latin:"","latin-ext":"text_editor_font_example_latin_ext_constant",cyrillic:"text_editor_font_example_cyrillic_constant",japanese:"text_editor_text_editor_font_example_japanese_constant",korean:"text_editor_font_example_korean_constant",arabic:"text_editor_font_example_arabic_constant",hebrew:"text_editor_font_example_hebrew_constant"},HELVETICA_FALLBACK:"HelveticaNeueW01-45Ligh, HelveticaNeueW02-45Ligh, HelveticaNeueW10-45Ligh, Helvetica Neue, Helvetica, Arial, メイリオ, meiryo, ヒラギノ角ゴ pro w3, hiragino kaku gothic pro, sans-serif"},h=new RegExp("^wfont_[0-9a-f]{6}_[0-9a-f]{32}");function g(e){if(!e)return!1;const t=e.split(",")[0];return!!t&&h.test(t)}function v(e,t){const n=function(e){return e.startsWith("http://")?e.replace("http://","https://"):e}(t);return e.filter(g).reduce((e,t)=>e+function(e,t){const n=e.split(",")[0];if(!n)return"";const r=y(n);return`@font-face {\nfont-family: ${function(e){const t=/^wfont_[0-9a-f]{6}_([0-9a-f]{25})[0-9a-f]{7}/.exec(e);return t&&`wf_${t[1]}`}(n)};\nsrc: url("${t}ufonts/${r}/woff/file.woff") format("woff"),\nurl("${t}ufonts/${r}/woff2/file.woff2") format("woff2"),\nurl("${t}ufonts/${r}/ttf/file.ttf") format("ttf");\n}\n`}(t,n),"")}function y(e){return g(e)?e.replace(p.LONG_UPLOADED_FONT_PREFIX,"").trim():null}const{parseValues:_}=n(5);function m(e){const t=new Set;return e.walkDecls(e=>{b(e,e=>{t.add(e)})}),Array.from(t)}function b(e,t){if("font"!==e.prop&&"font-family"!==e.prop)return;_(e.value).nodes.forEach(e=>{const n=e.nodes,r=n[n.length-1];if(r){const{type:e}=r;switch(e){case"item":r.name&&t(r.name);break;case"string":r.value&&'""'!==r.value&&"''"!==r.value&&t(r.value)}}})}const x=p,R=r,w=a;n.d(t,"jsModulesImport",function(){return s}),n.d(t,"generateStylableTheme",function(){return c}),n.d(t,"addStaticImports",function(){return l}),n.d(t,"removeStaticImports",function(){return d}),n.d(t,"fontConstants",function(){return x}),n.d(t,"fontUtils",function(){return R}),n.d(t,"fontStylable",function(){return w})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,